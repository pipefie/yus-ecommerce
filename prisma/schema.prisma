// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"

}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Product {
  id                Int       @id @default(autoincrement())
  printfulProductId String    @unique
  source            String    @default("printful")
  syncedAt          DateTime?
  syncStatus        String?   // 'ok' | 'error'
  deletedAt         DateTime?
  slug              String    @unique
  title             String
  description       String
  price             Int       // in cents
  imageUrl          String    // default product‚Äêlevel image
  images            Json      // JSON array of image URLs
  variants          Variant[]
  deleted           Boolean   @default(false)
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  @@index([printfulProductId])
}

model Variant {
  id                 Int      @id @default(autoincrement())
  printfulVariantId  String   @unique
  source             String   @default("printful")
  syncedAt           DateTime?
  syncStatus         String?
  deletedAt          DateTime?
  productId          Int
  size               String
  color              String
  price              Int      // in cents
  product            Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  imageUrl           String   // the primary mockup for that variant
  previewUrl         String   // you can use same as imageUrl or a thumbnail
  designUrls         Json     // JSON array of all mockup URLs (front/back/etc)
  deleted            Boolean  @default(false)
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  @@index([printfulVariantId])
}

model User {
  id             Int      @id @default(autoincrement())
  email          String   @unique
  name           String
  password       String
  role           String   @default("user")
  newsletterOptIn Boolean @default(false)
  orders         Order[]
  events         UserEvent[]
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

enum OrderStatus {
  pending
  paid
  fulfilled
  refunded
}

model Order {
  id             Int      @id @default(autoincrement())
  userId         Int?
  user           User?    @relation(fields: [userId], references: [id])
  stripeSessionId String       @unique
  items          Json
  totalAmount    Int
  currency       String   @default("eur")
  status         String   @default("pending")
  trackingNumber String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}



model UserEvent {
  id         Int      @id @default(autoincrement())
  userId     Int?
  user       User?   @relation(fields: [userId], references: [id])
  sessionId  String
  event      String
  entityType String
  entityId   String?
  metadata   Json
  ts         DateTime @default(now())
}